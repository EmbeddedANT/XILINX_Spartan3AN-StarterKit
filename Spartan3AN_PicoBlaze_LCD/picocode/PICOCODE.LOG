KCPSM3 Assembler log file for program 'picocode.psm'.
Generated by KCPSM3 version 1.30
Ken Chapman (Xilinx Ltd) 2005.
17Aug2015-12:53:39

 Addr Code

 000                          ; *
 000                          ; * picocode.psm - Control of LCD display
 000                          ; *
 000                          ; *      ___       _         _   _       _ ___ _ _ ___
 000                          ; * | __._ _ _| |_ ___ _| |_| |___ _| | . | \ |_ _|
 000                          ; * | _>| ' ' | . / ._/ . / . / ._/ . |   |   || |
 000                          ; * |___|_|_|_|___\___\___\___\___\___|_|_|_\_||_|
 000                          ; *
 000                          ; *
 000                          ; *  Created on : 20/07/2015
 000                          ; *      Author : Ernesto Andres Rincon Cruz
 000                          ; *      Web  : www.embeddedant.org
 000                          ; *    Device : XC3S700AN - 4FGG484
 000                          ; *    Board  : Spartan-3AN Starter Kit.
 000                          ; *
 000                          ; *  Based on Ken Chapman code v1.00 - 4th January 2006
 000                          ; *      Revision History:
 000                          ; *   Rev 1.0.0 - (ErnestoARC) First release 16/08/2015.
 000                          ; *
 000                          ;//////////////////////////////////////////////////////////////////////////////////
 000                          ; Use CONSTANT declarations to define LCD interface ports
 000                          CONSTANT LCD_output_port, 00        ;LCD character module output data and control
 000                          CONSTANT LCD_E, 01                  ;   active High Enable        E - bit0
 000                          CONSTANT LCD_RW, 02                 ;   Read=1 Write=0           RW - bit1
 000                          CONSTANT LCD_RS, 04                 ;   Instruction=0 Data=1     RS - bit2
 000                          CONSTANT LCD_drive, 08              ;   Master enable (active High) - bit3
 000                          CONSTANT LCD_DB4, 10                ;   4-bit              Data DB4 - bit4
 000                          CONSTANT LCD_DB5, 20                ;   interface          Data DB5 - bit5
 000                          CONSTANT LCD_DB6, 40                ;                      Data DB6 - bit6
 000                          CONSTANT LCD_DB7, 80                ;                      Data DB7 - bit7
 000                          ;ASCII table
 000                          ;
 000                          CONSTANT character_a, 61
 000                          CONSTANT character_b, 62
 000                          CONSTANT character_c, 63
 000                          CONSTANT character_d, 64
 000                          CONSTANT character_e, 65
 000                          CONSTANT character_f, 66
 000                          CONSTANT character_g, 67
 000                          CONSTANT character_h, 68
 000                          CONSTANT character_i, 69
 000                          CONSTANT character_j, 6A
 000                          CONSTANT character_k, 6B
 000                          CONSTANT character_l, 6C
 000                          CONSTANT character_m, 6D
 000                          CONSTANT character_n, 6E
 000                          CONSTANT character_o, 6F
 000                          CONSTANT character_p, 70
 000                          CONSTANT character_q, 71
 000                          CONSTANT character_r, 72
 000                          CONSTANT character_s, 73
 000                          CONSTANT character_t, 74
 000                          CONSTANT character_u, 75
 000                          CONSTANT character_v, 76
 000                          CONSTANT character_w, 77
 000                          CONSTANT character_x, 78
 000                          CONSTANT character_y, 79
 000                          CONSTANT character_z, 7A
 000                          CONSTANT character_A, 41
 000                          CONSTANT character_B, 42
 000                          CONSTANT character_C, 43
 000                          CONSTANT character_D, 44
 000                          CONSTANT character_E, 45
 000                          CONSTANT character_F, 46
 000                          CONSTANT character_G, 47
 000                          CONSTANT character_H, 48
 000                          CONSTANT character_I, 49
 000                          CONSTANT character_J, 4A
 000                          CONSTANT character_K, 4B
 000                          CONSTANT character_L, 4C
 000                          CONSTANT character_M, 4D
 000                          CONSTANT character_N, 4E
 000                          CONSTANT character_O, 4F
 000                          CONSTANT character_P, 50
 000                          CONSTANT character_Q, 51
 000                          CONSTANT character_R, 52
 000                          CONSTANT character_S, 53
 000                          CONSTANT character_T, 54
 000                          CONSTANT character_U, 55
 000                          CONSTANT character_V, 56
 000                          CONSTANT character_W, 57
 000                          CONSTANT character_X, 58
 000                          CONSTANT character_Y, 59
 000                          CONSTANT character_Z, 5A
 000                          CONSTANT character_0, 30
 000                          CONSTANT character_1, 31
 000                          CONSTANT character_2, 32
 000                          CONSTANT character_3, 33
 000                          CONSTANT character_4, 34
 000                          CONSTANT character_5, 35
 000                          CONSTANT character_6, 36
 000                          CONSTANT character_7, 37
 000                          CONSTANT character_8, 38
 000                          CONSTANT character_9, 39
 000                          CONSTANT character_colon, 3A
 000                          CONSTANT character_stop, 2E
 000                          CONSTANT character_semi_colon, 3B
 000                          CONSTANT character_minus, 2D
 000                          CONSTANT character_divide, 2F       ;'/'
 000                          CONSTANT character_plus, 2B
 000                          CONSTANT character_comma, 2C
 000                          CONSTANT character_less_than, 3C
 000                          CONSTANT character_greater_than, 3E ;>
 000                          CONSTANT character_equals, 3D
 000                          CONSTANT character_space, 20
 000                          CONSTANT character_CR, 0D           ;carriage return
 000                          CONSTANT character_question, 3F     ;'?'
 000                          CONSTANT character_dollar, 24
 000                          CONSTANT character_exclaim, 21      ;'!'
 000                          CONSTANT character_BS, 08           ;Back Space command character
 000                          ;;============================================================================
 000                          ;;
 000                          ;;============================================================================
 000                          ADDRESS 000                         ; Programs always start at reset vector 0
 000  3C000                   DISABLE INTERRUPT                   ; If using interrupts, be sure to enable the INTERRUPT input
 001                          ;;============================================================================
 001                          ;;
 001                          ;;============================================================================
 001                   BEGIN: 
 001                          ; <<< your code here >>>
 001  300D3                   CALL LCD_reset[0D3]                 ;initialise LCD display
 002  00510                   LOAD s5, 10                         ;Line 1 position 0
 003  300EB                   CALL LCD_cursor[0EB]
 004                          ;-------------------------------- Start First Display Line 1
 004  00520                   LOAD s5, character_space[20]
 005  300C0                   CALL LCD_write_data[0C0]
 006  00520                   LOAD s5, character_space[20]
 007  300C0                   CALL LCD_write_data[0C0]
 008  00520                   LOAD s5, character_space[20]
 009  300C0                   CALL LCD_write_data[0C0]
 00A  00550                   LOAD s5, character_P[50]
 00B  300C0                   CALL LCD_write_data[0C0]
 00C  00569                   LOAD s5, character_i[69]
 00D  300C0                   CALL LCD_write_data[0C0]
 00E  00563                   LOAD s5, character_c[63]
 00F  300C0                   CALL LCD_write_data[0C0]
 010  0056F                   LOAD s5, character_o[6F]
 011  300C0                   CALL LCD_write_data[0C0]
 012  00542                   LOAD s5, character_B[42]
 013  300C0                   CALL LCD_write_data[0C0]
 014  0056C                   LOAD s5, character_l[6C]
 015  300C0                   CALL LCD_write_data[0C0]
 016  00561                   LOAD s5, character_a[61]
 017  300C0                   CALL LCD_write_data[0C0]
 018  0057A                   LOAD s5, character_z[7A]
 019  300C0                   CALL LCD_write_data[0C0]
 01A  00565                   LOAD s5, character_e[65]
 01B  300C0                   CALL LCD_write_data[0C0]
 01C  00520                   LOAD s5, character_space[20]
 01D  300C0                   CALL LCD_write_data[0C0]
 01E  00520                   LOAD s5, character_space[20]
 01F  300C0                   CALL LCD_write_data[0C0]
 020  00520                   LOAD s5, character_space[20]
 021  300C0                   CALL LCD_write_data[0C0]
 022  00520                   LOAD s5, character_space[20]
 023  300C0                   CALL LCD_write_data[0C0]
 024                          ;-------------------------------- Start Second Display Line 1
 024  00565                   LOAD s5, character_e[65]
 025  300C0                   CALL LCD_write_data[0C0]
 026  0056D                   LOAD s5, character_m[6D]
 027  300C0                   CALL LCD_write_data[0C0]
 028  00562                   LOAD s5, character_b[62]
 029  300C0                   CALL LCD_write_data[0C0]
 02A  00565                   LOAD s5, character_e[65]
 02B  300C0                   CALL LCD_write_data[0C0]
 02C  00564                   LOAD s5, character_d[64]
 02D  300C0                   CALL LCD_write_data[0C0]
 02E  00564                   LOAD s5, character_d[64]
 02F  300C0                   CALL LCD_write_data[0C0]
 030  00565                   LOAD s5, character_e[65]
 031  300C0                   CALL LCD_write_data[0C0]
 032  00564                   LOAD s5, character_d[64]
 033  300C0                   CALL LCD_write_data[0C0]
 034  00561                   LOAD s5, character_a[61]
 035  300C0                   CALL LCD_write_data[0C0]
 036  0056E                   LOAD s5, character_n[6E]
 037  300C0                   CALL LCD_write_data[0C0]
 038  00574                   LOAD s5, character_t[74]
 039  300C0                   CALL LCD_write_data[0C0]
 03A  0052E                   LOAD s5, character_stop[2E]
 03B  300C0                   CALL LCD_write_data[0C0]
 03C  0056F                   LOAD s5, character_o[6F]
 03D  300C0                   CALL LCD_write_data[0C0]
 03E  00572                   LOAD s5, character_r[72]
 03F  300C0                   CALL LCD_write_data[0C0]
 040  00567                   LOAD s5, character_g[67]
 041  300C0                   CALL LCD_write_data[0C0]
 042  00520                   LOAD s5, character_space[20]
 043  300C0                   CALL LCD_write_data[0C0]
 044  00520                   LOAD s5, 20                         ;Line 2 position 0
 045  300EB                   CALL LCD_cursor[0EB]
 046                          ;-------------------------------- Start First Display Line 2
 046  00520                   LOAD s5, character_space[20]
 047  300C0                   CALL LCD_write_data[0C0]
 048  00520                   LOAD s5, character_space[20]
 049  300C0                   CALL LCD_write_data[0C0]
 04A  00553                   LOAD s5, character_S[53]
 04B  300C0                   CALL LCD_write_data[0C0]
 04C  00550                   LOAD s5, character_P[50]
 04D  300C0                   CALL LCD_write_data[0C0]
 04E  00541                   LOAD s5, character_A[41]
 04F  300C0                   CALL LCD_write_data[0C0]
 050  00552                   LOAD s5, character_R[52]
 051  300C0                   CALL LCD_write_data[0C0]
 052  00554                   LOAD s5, character_T[54]
 053  300C0                   CALL LCD_write_data[0C0]
 054  00541                   LOAD s5, character_A[41]
 055  300C0                   CALL LCD_write_data[0C0]
 056  0054E                   LOAD s5, character_N[4E]
 057  300C0                   CALL LCD_write_data[0C0]
 058  0052D                   LOAD s5, character_minus[2D]
 059  300C0                   CALL LCD_write_data[0C0]
 05A  00533                   LOAD s5, character_3[33]
 05B  300C0                   CALL LCD_write_data[0C0]
 05C  00541                   LOAD s5, character_A[41]
 05D  300C0                   CALL LCD_write_data[0C0]
 05E  0054E                   LOAD s5, character_N[4E]
 05F  300C0                   CALL LCD_write_data[0C0]
 060  00520                   LOAD s5, character_space[20]
 061  300C0                   CALL LCD_write_data[0C0]
 062  00520                   LOAD s5, character_space[20]
 063  300C0                   CALL LCD_write_data[0C0]
 064  00520                   LOAD s5, character_space[20]
 065  300C0                   CALL LCD_write_data[0C0]
 066                          ;-------------------------------- Start Second Display Line 2
 066  00520                   LOAD s5, character_space[20]
 067  300C0                   CALL LCD_write_data[0C0]
 068  00531                   LOAD s5, character_1[31]
 069  300C0                   CALL LCD_write_data[0C0]
 06A  00532                   LOAD s5, character_2[32]
 06B  300C0                   CALL LCD_write_data[0C0]
 06C  0052D                   LOAD s5, character_minus[2D]
 06D  300C0                   CALL LCD_write_data[0C0]
 06E  00541                   LOAD s5, character_A[41]
 06F  300C0                   CALL LCD_write_data[0C0]
 070  00575                   LOAD s5, character_u[75]
 071  300C0                   CALL LCD_write_data[0C0]
 072  00567                   LOAD s5, character_g[67]
 073  300C0                   CALL LCD_write_data[0C0]
 074  00575                   LOAD s5, character_u[75]
 075  300C0                   CALL LCD_write_data[0C0]
 076  00573                   LOAD s5, character_s[73]
 077  300C0                   CALL LCD_write_data[0C0]
 078  00574                   LOAD s5, character_t[74]
 079  300C0                   CALL LCD_write_data[0C0]
 07A  0052D                   LOAD s5, character_minus[2D]
 07B  300C0                   CALL LCD_write_data[0C0]
 07C  00532                   LOAD s5, character_2[32]
 07D  300C0                   CALL LCD_write_data[0C0]
 07E  00530                   LOAD s5, character_0[30]
 07F  300C0                   CALL LCD_write_data[0C0]
 080  00531                   LOAD s5, character_1[31]
 081  300C0                   CALL LCD_write_data[0C0]
 082  00535                   LOAD s5, character_5[35]
 083  300C0                   CALL LCD_write_data[0C0]
 084  00520                   LOAD s5, character_space[20]
 085  300C0                   CALL LCD_write_data[0C0]
 086  300F5             LOOP: CALL LCD_shift_left[0F5]            ;shift LCD display
 087  003FF                   LOAD s3, FF                         ; Call delay x 255ms
 088  300A2                   CALL delay_ms[0A2]
 089  34086                   JUMP LOOP[086]                      ; Embedded applications never end
 08A                          ;**************************************************************************************
 08A                          ;Software delay routines
 08A                          ;**************************************************************************************
 08A                          ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
 08A                          ;
 08A                          ;Example: For a 50MHz clock the constant value is (10-6)/4 = 11  (0B Hex).
 08A                          ;For clock rates below 10MHz the value of 1 must be used and the operation will
 08A                          ;become lower than intended.
 08A                          ;
 08A                          CONSTANT delay_1us_constant, 0B
 08A                          ;
 08A                          ;
 08A                          ;
 08A                          ;Delay of 1us.
 08A                          ;
 08A                          ;Constant value defines reflects the clock applied to KCPSM3. Every instruction
 08A                          ;executes in 2 clock cycles making the calculation highly predictable. The '6' in
 08A                          ;the following equation even allows for 'CALL delay_1us' instruction in the initiating code.
 08A                          ;
 08A                          ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
 08A                          ;
 08A                          ;Registers used s0
 08A                          ;
 08A  0000B        delay_1us: LOAD s0, delay_1us_constant[0B]
 08B  1C001         wait_1us: SUB s0, 01
 08C  3548B                   JUMP NZ, wait_1us[08B]
 08D  2A000                   RETURN
 08E                          ;
 08E                          ;Delay of 40us.
 08E                          ;
 08E                          ;Registers used s0, s1
 08E                          ;
 08E  00128       delay_40us: LOAD s1, 28                         ;40 x 1us = 40us
 08F  3008A        wait_40us: CALL delay_1us[08A]
 090  1C101                   SUB s1, 01
 091  3548F                   JUMP NZ, wait_40us[08F]
 092  2A000                   RETURN
 093                          ;
 093                          ;
 093                          ;Delay of 1ms.
 093                          ;
 093                          ;Registers used s0, s1, s2
 093                          ;
 093  00219        delay_1ms: LOAD s2, 19                         ;25 x 40us = 1ms
 094  3008E         wait_1ms: CALL delay_40us[08E]
 095  1C201                   SUB s2, 01
 096  35494                   JUMP NZ, wait_1ms[094]
 097  2A000                   RETURN
 098                          ;
 098                          ;Delay of 20ms.
 098                          ;
 098                          ;Delay of 20ms used during initialisation.
 098                          ;
 098                          ;Registers used s0, s1, s2, s3
 098                          ;
 098  00314       delay_20ms: LOAD s3, 14                         ;20 x 1ms = 20ms
 099  30093        wait_20ms: CALL delay_1ms[093]
 09A  1C301                   SUB s3, 01
 09B  35499                   JUMP NZ, wait_20ms[099]
 09C  2A000                   RETURN
 09D                          ;
 09D                          ;Delay of approximately 1 second.
 09D                          ;
 09D                          ;Registers used s0, s1, s2, s3, s4
 09D                          ;
 09D  00432         delay_1s: LOAD s4, 32                         ;50 x 20ms = 1000ms
 09E  30098          wait_1s: CALL delay_20ms[098]
 09F  1C401                   SUB s4, 01
 0A0  3549E                   JUMP NZ, wait_1s[09E]
 0A1  2A000                   RETURN
 0A2                          ;
 0A2                          ;
 0A2                          ;
 0A2  30093         delay_ms: CALL delay_1ms[093]                 ; 1ms x s3
 0A3  1C301                   SUB s3, 01
 0A4  354A2                   JUMP NZ, delay_ms[0A2]
 0A5  2A000                   RETURN
 0A6                          ;**************************************************************************************
 0A6                          ;LCD Character Module Routines
 0A6                          ;**************************************************************************************
 0A6                          ;
 0A6                          ;LCD module is a 16 character by 2 line display but all displays are very similar
 0A6                          ;The 4-wire data interface will be used (DB4 to DB7).
 0A6                          ;
 0A6                          ;The LCD modules are relatively slow and software delay loops are used to slow down
 0A6                          ;KCPSM3 adequately for the LCD to communicate. The delay routines are provided in
 0A6                          ;a different section (see above in this case).
 0A6                          ;
 0A6                          ;
 0A6                          ;Pulse LCD enable signal 'E' high for greater than 230ns (1us is used).
 0A6                          ;
 0A6                          ;Register s4 should define the current state of the LCD output port.
 0A6                          ;
 0A6                          ;Registers used s0, s4
 0A6                          ;
 0A6  0C401      LCD_pulse_E: OR s4, 01                           ;E=1
 0A7  2C400                   OUTPUT s4, LCD_output_port[00]
 0A8  3008A                   CALL delay_1us[08A]
 0A9  0A4FE                   AND s4, FE                          ;E=0
 0AA  2C400                   OUTPUT s4, LCD_output_port[00]
 0AB  2A000                   RETURN
 0AC                          ;
 0AC                          ;Write 4-bit instruction to LCD display.
 0AC                          ;
 0AC                          ;The 4-bit instruction should be provided in the upper 4-bits of register s4.
 0AC                          ;Note that this routine does not release the master enable but as it is only
 0AC                          ;used during initialisation and as part of the 8-bit instruction write it
 0AC                          ;should be acceptable.
 0AC                          ;
 0AC                          ;Registers used s4
 0AC                          ;
 0AC  0A4F8  LCD_write_inst4: AND s4, F8                          ;RS=0 Instruction, RW=0 Write, E=0
 0AD  2C400                   OUTPUT s4, LCD_output_port[00]      ;set up RS and RW >40ns before enable pulse
 0AE  3008A                   CALL delay_1us[08A]
 0AF  300A6                   CALL LCD_pulse_E[0A6]
 0B0  2A000                   RETURN
 0B1                          ;
 0B1                          ;
 0B1                          ;Write 8-bit instruction to LCD display.
 0B1                          ;
 0B1                          ;The 8-bit instruction should be provided in register s5.
 0B1                          ;Instructions are written using the following sequence
 0B1                          ; Upper nibble
 0B1                          ; wait >1us
 0B1                          ; Lower nibble
 0B1                          ; wait >40us
 0B1                          ;
 0B1                          ;Registers used s0, s1, s4, s5
 0B1                          ;
 0B1  01450  LCD_write_inst8: LOAD s4, s5
 0B2  0A4F0                   AND s4, F0                          ;LCD_drive=0, RS=0 Instruction, RW=0 Write, E=0
 0B3  0C408                   OR s4, LCD_drive[08]                ;LCD_drive=1
 0B4  300AC                   CALL LCD_write_inst4[0AC]           ;write upper nibble
 0B5  3008A                   CALL delay_1us[08A]                 ;wait >1us
 0B6  01450                   LOAD s4, s5                         ;select lower nibble with
 0B7  20407                   SL1 s4                              ;LCD_drive=1
 0B8  20406                   SL0 s4                              ;RS=0 Instruction
 0B9  20406                   SL0 s4                              ;RW=0 Write
 0BA  20406                   SL0 s4                              ;E=0
 0BB  300AC                   CALL LCD_write_inst4[0AC]           ;write lower nibble
 0BC  3008E                   CALL delay_40us[08E]                ;wait >40us
 0BD  004F0                   LOAD s4, F0                         ;Enable=0 RS=0 Instruction, RW=0 Write, E=0
 0BE  2C400                   OUTPUT s4, LCD_output_port[00]      ;Release master enable
 0BF  2A000                   RETURN
 0C0                          ;
 0C0                          ;
 0C0                          ;
 0C0                          ;Write 8-bit data to LCD display.
 0C0                          ;
 0C0                          ;The 8-bit data should be provided in register s5.
 0C0                          ;Data bytes are written using the following sequence
 0C0                          ; Upper nibble
 0C0                          ; wait >1us
 0C0                          ; Lower nibble
 0C0                          ; wait >40us
 0C0                          ;
 0C0                          ;Registers used s0, s1, s4, s5
 0C0                          ;
 0C0  01450   LCD_write_data: LOAD s4, s5
 0C1  0A4F0                   AND s4, F0                          ;LCD_drive=0, RS=0 Instruction, RW=0 Write, E=0
 0C2  0C40C                   OR s4, 0C                           ;LCD_drive=1, RS=1 Data, RW=0 Write, E=0
 0C3  2C400                   OUTPUT s4, LCD_output_port[00]      ;set up RS and RW >40ns before enable pulse
 0C4  3008A                   CALL delay_1us[08A]
 0C5  300A6                   CALL LCD_pulse_E[0A6]               ;write upper nibble
 0C6  3008A                   CALL delay_1us[08A]                 ;wait >1us
 0C7  01450                   LOAD s4, s5                         ;select lower nibble with
 0C8  20407                   SL1 s4                              ;LCD_drive=1
 0C9  20407                   SL1 s4                              ;RS=1 Data
 0CA  20406                   SL0 s4                              ;RW=0 Write
 0CB  20406                   SL0 s4                              ;E=0
 0CC  2C400                   OUTPUT s4, LCD_output_port[00]      ;set up RS and RW >40ns before enable pulse
 0CD  3008A                   CALL delay_1us[08A]
 0CE  300A6                   CALL LCD_pulse_E[0A6]               ;write lower nibble
 0CF  3008E                   CALL delay_40us[08E]                ;wait >40us
 0D0  004F0                   LOAD s4, F0                         ;LCD_drive=0 RS=0 Instruction, RW=0 Write, E=0
 0D1  2C400                   OUTPUT s4, LCD_output_port[00]      ;Release master enable
 0D2  2A000                   RETURN
 0D3                          ;
 0D3                          ;
 0D3                          ;
 0D3                          ;
 0D3                          ;
 0D3                          ;
 0D3                          ;
 0D3                          ;Reset and initialise display to communicate using 4-bit data mode
 0D3                          ;Includes routine to clear the display.
 0D3                          ;
 0D3                          ;Requires the 4-bit instructions 3,3,3,2 to be sent with suitable delays
 0D3                          ;following by the 8-bit instructions to set up the display.
 0D3                          ;
 0D3                          ;  28 = '001' Function set, '0' 4-bit mode, '1' 2-line, '0' 5x7 dot matrix, 'xx'
 0D3                          ;  06 = '000001' Entry mode, '1' increment, '0' no display shift
 0D3                          ;  0C = '00001' Display control, '1' display on, '0' cursor off, '0' cursor blink off
 0D3                          ;  01 = '00000001' Display clear
 0D3                          ;
 0D3                          ;Registers used s0, s1, s2, s3, s4
 0D3                          ;
 0D3  30098        LCD_reset: CALL delay_20ms[098]                ;wait more that 15ms for display to be ready
 0D4  00430                   LOAD s4, 30
 0D5  300AC                   CALL LCD_write_inst4[0AC]           ;send '3'
 0D6  30098                   CALL delay_20ms[098]                ;wait >100us
 0D7  00430                   LOAD s4, 30
 0D8  300AC                   CALL LCD_write_inst4[0AC]           ;send '3'
 0D9  30098                   CALL delay_20ms[098]                ;wait >100us
 0DA  00430                   LOAD s4, 30
 0DB  300AC                   CALL LCD_write_inst4[0AC]           ;send '3'
 0DC  30098                   CALL delay_20ms[098]                ;wait >100us
 0DD  00420                   LOAD s4, 20
 0DE  300AC                   CALL LCD_write_inst4[0AC]           ;send '2'
 0DF  3008E                   CALL delay_40us[08E]                ;wait >40us
 0E0  00528                   LOAD s5, 28                         ;Function set
 0E1  300B1                   CALL LCD_write_inst8[0B1]
 0E2  00506                   LOAD s5, 06                         ;Entry mode
 0E3  300B1                   CALL LCD_write_inst8[0B1]
 0E4  0050C                   LOAD s5, 0C                         ;Display control
 0E5  300B1                   CALL LCD_write_inst8[0B1]
 0E6  00501        LCD_clear: LOAD s5, 01                         ;Display clear
 0E7  300B1                   CALL LCD_write_inst8[0B1]
 0E8  30093                   CALL delay_1ms[093]                 ;wait >1.64ms for display to clear
 0E9  30093                   CALL delay_1ms[093]
 0EA  2A000                   RETURN
 0EB                          ;
 0EB                          ;Position the cursor ready for characters to be written.
 0EB                          ;The display is formed of 2 lines of 16 characters and each
 0EB                          ;position has a corresponding address as indicated below.
 0EB                          ;
 0EB                          ;                   Character position
 0EB                          ;           0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15
 0EB                          ;
 0EB                          ; Line 1 - 80 81 82 83 84 85 86 87 88 89 8A 8B 8C 8D 8E 8F
 0EB                          ; Line 2 - C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF
 0EB                          ;
 0EB                          ;This routine will set the cursor position using the value provided
 0EB                          ;in register s5. The upper nibble will define the line and the lower
 0EB                          ;nibble the character position on the line.
 0EB                          ; Example s5 = 2B will position the cursor on line 2 position 11
 0EB                          ;
 0EB                          ;Registers used s0, s1, s2, s3, s4
 0EB                          ;
 0EB  12510       LCD_cursor: TEST s5, 10                         ;test for line 1
 0EC  350F1                   JUMP Z, set_line2[0F1]
 0ED  0A50F                   AND s5, 0F                          ;make address in range 80 to 8F for line 1
 0EE  0C580                   OR s5, 80
 0EF  300B1                   CALL LCD_write_inst8[0B1]           ;instruction write to set cursor
 0F0  2A000                   RETURN
 0F1  0A50F        set_line2: AND s5, 0F                          ;make address in range C0 to CF for line 2
 0F2  0C5C0                   OR s5, C0
 0F3  300B1                   CALL LCD_write_inst8[0B1]           ;instruction write to set cursor
 0F4  2A000                   RETURN
 0F5                          ;
 0F5                          ;This routine will shift the complete display one position to the left.
 0F5                          ;The cursor position and LCD memory contents will not change.
 0F5                          ;
 0F5                          ;
 0F5                          ;Registers used s0, s1, s2, s3, s4, s5
 0F5                          ;
 0F5  00518   LCD_shift_left: LOAD s5, 18                         ;shift display left
 0F6  300B1                   CALL LCD_write_inst8[0B1]
 0F7  2A000                   RETURN
 0F8                          ;
 0F8                          ;;============================================================================
 0F8                          ;; An Interrupt Service Routine (ISR) is required if using interrupts
 0F8                          ;; Interrupts are automatically disabled when an interrupt is recognized
 0F8                          ;; Never re-enable interrupts during the ISR
 0F8                          ;; Use RETURNI DISABLE to leave interrupts disabled
 0F8                          ;;============================================================================
 0F8                     ISR: 
 0F8                          ; <<< your interrupt code here >>>
 0F8  38001                   RETURNI ENABLE                      ; Return from interrupt service routine
 0F9                          ;;============================================================================
 0F9                          ;; Interrupt service routine vector.
 0F9                          ;;============================================================================
 3FF                          ADDRESS 3FF                         ; Interrupt vector is located at highest instruction address
 3FF  340F8                   JUMP ISR[0F8]                       ; Jump to interrupt service routine, ISR
 3FF                          ;;============================================================================
 3FF                          ;;
 3FF                          ;;============================================================================
