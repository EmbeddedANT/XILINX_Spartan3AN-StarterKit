KCPSM3 Assembler log file for program 'picocode.psm'.
Generated by KCPSM3 version 1.30
Ken Chapman (Xilinx Ltd) 2005.
16Aug2015-19:51:29

 Addr Code

 000                ; Use CONSTANT declarations to define output port addresses
 000                CONSTANT PORT_A, 00         ;
 000                ; Use CONSTANT declarations to define leds sequence
 000                CONSTANT LED_SEQUENCE_1, 01 ;
 000                CONSTANT LED_SEQUENCE_2, 02 ;
 000                CONSTANT LED_SEQUENCE_3, 04 ;
 000                CONSTANT LED_SEQUENCE_4, 08 ;
 000                CONSTANT LED_SEQUENCE_5, 10 ;
 000                CONSTANT LED_SEQUENCE_6, 20 ;
 000                CONSTANT LED_SEQUENCE_7, 40 ;
 000                CONSTANT LED_SEQUENCE_8, 80 ;
 000                ;;============================================================================
 000                ;;
 000                ;;============================================================================
 000                ADDRESS 000                 ; Programs always start at reset vector 0
 000  3C000         DISABLE INTERRUPT           ; If using interrupts, be sure to enable the INTERRUPT input
 001                ;;============================================================================
 001                ;;
 001                ;;============================================================================
 001         BEGIN: 
 001                ; <<< your code here >>>
 001  00001         LOAD s0, LED_SEQUENCE_1[01]
 002  2C000         OUTPUT s0, PORT_A[00]
 003  3001A         CALL delay[01A]
 004  00002         LOAD s0, LED_SEQUENCE_2[02]
 005  2C000         OUTPUT s0, PORT_A[00]
 006  3001A         CALL delay[01A]
 007  00004         LOAD s0, LED_SEQUENCE_3[04]
 008  2C000         OUTPUT s0, PORT_A[00]
 009  3001A         CALL delay[01A]
 00A  00008         LOAD s0, LED_SEQUENCE_4[08]
 00B  2C000         OUTPUT s0, PORT_A[00]
 00C  3001A         CALL delay[01A]
 00D  00010         LOAD s0, LED_SEQUENCE_5[10]
 00E  2C000         OUTPUT s0, PORT_A[00]
 00F  3001A         CALL delay[01A]
 010  00020         LOAD s0, LED_SEQUENCE_6[20]
 011  2C000         OUTPUT s0, PORT_A[00]
 012  3001A         CALL delay[01A]
 013  00040         LOAD s0, LED_SEQUENCE_7[40]
 014  2C000         OUTPUT s0, PORT_A[00]
 015  3001A         CALL delay[01A]
 016  00080         LOAD s0, LED_SEQUENCE_8[80]
 017  2C000         OUTPUT s0, PORT_A[00]
 018  3001A         CALL delay[01A]
 019  34001         JUMP BEGIN[001]             ; Embedded applications never end
 01A                ;;============================================================================
 01A                ; Delay routine (~0.5s.)
 01A                ;;============================================================================
 01A                ; PicoBlaze requires 2 clocks per instruction
 01A                ; 2 + (4 + (4 + 4*256 + 4) * 256 + 4)*DELAY_LOOP + 2 =
 01A                ; 500ms = (4 + 264200*DELAY_LOOP )*(1/50MHz)
 01A                ; DELAY_LOOP = 0x5E
 01A                ; Use CONSTANT declarations to time delay refinition
 01A                CONSTANT DELAY_LOOP, 5E     ; Loop delay
 01A         delay: 
 01A  00200         LOAD s2, 00                 ; 2
 01B  18201   rpt3: ADD s2, 01                  ; 2---------------------------------------------|
 01C                ;  ---------------------------------------------|
 01C  00100         LOAD s1, 00                 ; 2---------------------------------------------|
 01D  18101   rpt2: ADD s1, 01                  ; 2-------------------------------------|
 01E                ;  -------------------------------------|
 01E  00000         LOAD s0, 00                 ; 2-------------------------------------|
 01F  18001   rpt1: ADD s0, 01                  ; 2 ---------------|
 020  3541F         JUMP NZ, rpt1[01F]          ; 2 ----------4*256|
 021                ;  -------------------------------------|
 021  14100         COMPARE s1, 00              ; 2-------------------------------------|
 022  3541D         JUMP NZ, rpt2[01D]          ; 2----------------(4 + 4*256 + 4) * 256|
 023  1425E         COMPARE s2, DELAY_LOOP[5E]  ; 2---------------------------------------------|
 024  3541B         JUMP NZ, rpt3[01B]          ; 2---(4 + (4 + 4*256 + 4) * 256 + 4)*DELAY_LOOP|
 025  2A000         RETURN                      ; 2
 026                ;;============================================================================
 026                ;; An Interrupt Service Routine (ISR) is required if using interrupts
 026                ;; Interrupts are automatically disabled when an interrupt is recognized
 026                ;; Never re-enable interrupts during the ISR
 026                ;; Use RETURNI DISABLE to leave interrupts disabled
 026                ;;============================================================================
 026           ISR: 
 026                ; <<< your interrupt code here >>>
 026  38001         RETURNI ENABLE              ; Return from interrupt service routine
 027                ;;============================================================================
 027                ;; Interrupt service routine vector.
 027                ;;============================================================================
 3FF                ADDRESS 3FF                 ; Interrupt vector is located at highest instruction address
 3FF  34026         JUMP ISR[026]               ; Jump to interrupt service routine, ISR
 3FF                ;;============================================================================
 3FF                ;;
 3FF                ;;============================================================================
